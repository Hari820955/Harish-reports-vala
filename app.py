import streamlit as st
import streamlit as st
try:
    import pytesseract
    import cv2
except ImportError as e:
    st.error(f"Required library missing: {e}. Please contact the app administrator.")
    st.stop()
from PIL import Image
import numpy as np
import re

# Page config
st.set_page_config(page_title="Reportslelo", layout="centered")

st.title("üßæ Reportslelo - Lab Report Analyzer")
st.markdown("##### Harish Choudhary Clinic | üìû 8209558359")

uploaded_file = st.file_uploader("‡§ï‡•É‡§™‡§Ø‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç üì§", type=["jpg", "png", "jpeg"])

def preprocess_image(image_cv):
    """Preprocess image for better OCR accuracy."""
    # Convert to grayscale
    gray = cv2.cvtColor(image_cv, cv2.COLOR_BGR2GRAY)
    # Adaptive thresholding for better contrast
    thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    # Denoise
    denoised = cv2.fastNlMeansDenoising(thresh)
    # Resize for better OCR (optional, scale up 1.5x)
    resized = cv2.resize(denoised, None, fx=1.5, fy=1.5, interpolation=cv2.INTER_CUBIC)
    return resized

def extract_details(text):
    """Extract name, age, and phone number with robust regex."""
    # Name: Match variations like "Mr.HARISH", "Name: HARISH", "‡§®‡§æ‡§Æ: ‡§π‡§∞‡§ø‡§∂", or standalone names
    name_match = re.search(r'(?:Name|Patient Name|‡§®‡§æ‡§Æ|[A-Za-z]+\.)[:\- ]*([A-Za-z\s\.]+)|([A-Za-z\s\.]+)(?=\s*(?:Age|‡§â‡§Æ‡•ç‡§∞))', text, re.IGNORECASE)
    # Age: Match "Age <: 21 Years", "Age: 21", "‡§â‡§Æ‡•ç‡§∞: 21", or standalone numbers near "Age"
    age_match = re.search(r'(?:Age|‡§â‡§Æ‡•ç‡§∞)[:\<\-\s]+(\d+)(?:\s*Years)?|\b(\d{1,3})\s*(?:Years|yrs)', text, re.IGNORECASE)
    # Phone: Match 10-digit numbers after "Phone", "Mobile", or standalone
    phone_match = re.search(r'(?:Phone|Mobile|‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤)[:\- ]*(\d{10})|\b(\d{10})\b', text, re.IGNORECASE)

    name = (name_match.group(1) or name_match.group(2)).strip() if name_match else "Mr/Ms"
    age = (age_match.group(1) or age_match.group(2)).strip() if age_match else "N/A"
    phone = (phone_match.group(1) or phone_match.group(2)).strip() if phone_match else "N/A"

    # Debug extraction
    st.write("**Debug: Extracted Details**")
    st.write(f"Name: {name}")
    st.write(f"Age: {age}")
    st.write(f"Phone: {phone}")

    return name, age, phone

def generate_summary(text):
    """Generate a 5-6 line AI-driven summary in Hindi for any lab report."""
    summary = []
    text_lower = text.lower()

    # Extract test names and values using regex
    test_matches = re.findall(r'(\w+(?:\s+\w+)*)\s*[:\-=]\s*([\d\.]+)\s*(\w+)?', text, re.IGNORECASE)
    abnormal_tests = []
    
    # Analyze tests and values
    for test_name, value, unit in test_matches:
        try:
            value = float(value)
            # Placeholder ranges (customize based on common tests)
            ranges = {
                "glucose": (70, 140),
                "hemoglobin": (12, 16),
                "cholesterol": (0, 200),
                "creatinine": (0.6, 1.2),
                "ttg": (0.01, 20.0)
            }
            test_key = test_name.lower().strip()
            for key, (low, high) in ranges.items():
                if key in test_key:
                    status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if low <= value <= high else "‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø"
                    abnormal_tests.append(f"{test_name} ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞ {value} {unit or ''} ‡§π‡•à, ‡§ú‡•ã {status} ‡§π‡•à‡•§")
                    break
            else:
                summary.append(f"{test_name} ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞ {value} {unit or ''} ‡§π‡•à‡•§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§á‡§∏‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§µ‡§æ‡§è‡§Ç‡•§")
        except ValueError:
            continue

    # Add specific insights
    if "ttg" in text_lower or "celiac" in text_lower:
        summary.append("‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ü‡•Ä‡§ü‡•Ä‡§ú‡•Ä ‡§ü‡•á‡§∏‡•ç‡§ü ‡§π‡•à, ‡§ú‡•ã ‡§∏‡•á‡§≤‡§ø‡§Ø‡§ï ‡§∞‡•ã‡§ó ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ó‡•ç‡§≤‡•Ç‡§ü‡•á‡§®-‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§")
    if "glucose" in text_lower or "sugar" in text_lower:
        summary.append("‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú‡§º ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§§‡§∞ ‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§")
    if abnormal_tests:
        summary.extend(abnormal_tests[:2])  # Limit to 2 to avoid overcrowding

    # General advice
    summary.append("‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§≤‡•á‡§Ç‡•§")
    summary.append("‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§")

    # Ensure 5-6 lines
    if len(summary) < 5:
        summary.append("‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡•à‡§∏‡•á ‡§•‡§ï‡§æ‡§® ‡§Ø‡§æ ‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
    if len(summary) < 6:
        summary.append("‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")

    return "\n".join(summary[:6])

if uploaded_file is not None:
    try:
        st.image(uploaded_file, caption="‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü", use_container_width=True)
        image = Image.open(uploaded_file)
        image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        processed_image = preprocess_image(image_cv)
        
        # Try English first, fallback to English+Hindi
        extracted_text = pytesseract.image_to_string(processed_image, lang='eng')
        if not extracted_text.strip():
            extracted_text = pytesseract.image_to_string(processed_image, lang='eng+hin')
        
        if not extracted_text.strip():
            st.warning("‡§ï‡•ã‡§à ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü, ‡§â‡§ö‡•ç‡§ö-‡§∞‡§ø‡§ú‡§º‡•â‡§≤‡•ç‡§Ø‡•Ç‡§∂‡§® ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§")
            st.stop()

        st.subheader("üìÑ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü:")
        st.text(extracted_text)

        name, age, phone = extract_details(extracted_text)
        report_summary = generate_summary(extracted_text)

        final_message = f"""üë§ ‡§®‡§æ‡§Æ: {name}
üéÇ ‡§â‡§Æ‡•ç‡§∞: {age} ‡§∏‡§æ‡§≤
üì± ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï: {phone}

üìë ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂:
{report_summary}

üè• Harish Choudhary Clinic
üìû 8209558359"""

        st.subheader("üì≤ ‡§Æ‡§∞‡•Ä‡§ú ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú:")
        st.text(final_message)
    except Exception as e:
        st.error(f"‡§á‡§Æ‡•á‡§ú ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
